#define HAS_POSITIONS

#ifdef HAS_MATRICES
	#define IF_MATRICES(x) x
#else
	#define IF_MATRICES(x) 
#endif 

#ifdef HAS_POSITIONS
	#define IF_POSITION(x) x
#else
	#define IF_POSITION(x)
#endif

#ifdef HAS_NORMALS
	#define IF_NORMAL(x) x
#else
	#define IF_NORMAL(x)
#endif

#ifdef HAS_COLORS0
	#define IF_COLOR0(x) x
#else		   
	#define IF_COLOR0(x)
#endif

#ifdef HAS_COLORS1
	#define IF_COLOR1(x) x
#else		   
	#define IF_COLOR1(x)
#endif

#ifdef HAS_TEXCOORDS0
	#define IF_TEXCOORD0(x) x
#else		   
	#define IF_TEXCOORD0(x)
#endif

#ifdef HAS_TEXCOORDS1
	#define IF_TEXCOORD1(x) x
#else		   
	#define IF_TEXCOORD1(x)
#endif

#ifdef HAS_TEXCOORDS2
	#define IF_TEXCOORD2(x) x
#else		   
	#define IF_TEXCOORD2(x)
#endif

#ifdef HAS_TEXCOORDS3
	#define IF_TEXCOORD3(x) x
#else		   
	#define IF_TEXCOORD3(x)
#endif

#ifdef HAS_TEXCOORDS4
	#define IF_TEXCOORD4(x) x
#else		   
	#define IF_TEXCOORD4(x)
#endif

#ifdef HAS_TEXCOORDS5
	#define IF_TEXCOORD5(x) x
#else		   
	#define IF_TEXCOORD5(x)
#endif

#ifdef HAS_TEXCOORDS6
	#define IF_TEXCOORD6(x) x
#else		   
	#define IF_TEXCOORD6(x)
#endif

#ifdef HAS_TEXCOORDS7
	#define IF_TEXCOORD7(x) x
#else		   
	#define IF_TEXCOORD7(x)
#endif


cbuffer g_PerFrame
{
	float4x4 WorldViewProj;
	float4 globalColor;
}

cbuffer PerBatch
{
	float4x4 ModelMat[10];
}

struct VsIn
{
	IF_MATRICES(	uint   MatIndex : Generic   ;)
	IF_POSITION(	float3 Position : Position	;)
	IF_NORMAL(		float3 Normal	: Normal	;)
	IF_COLOR0(		uint4  Color0	: Color0	;)
	IF_COLOR1(		uint4  Color1	: Color1	;)
	IF_TEXCOORD0(	float2 TexCoord0: Texcoord0	;)
	IF_TEXCOORD1(	float2 TexCoord1: Texcoord1	;)
	IF_TEXCOORD2(	float2 TexCoord2: Texcoord2	;)
	IF_TEXCOORD3(	float2 TexCoord3: Texcoord3	;)
	IF_TEXCOORD4(	float2 TexCoord4: Texcoord4	;)
	IF_TEXCOORD5(	float2 TexCoord5: Texcoord5	;)
	IF_TEXCOORD6(	float2 TexCoord6: Texcoord6	;)
	IF_TEXCOORD7(	float2 TexCoord7: Texcoord7	;)
};

struct PsIn
{
	float4 Position : SV_Position;
};

[Vertex shader]

PsIn main(VsIn In)
{
	PsIn Out;
	float4 position = float4(In.Position, 1.0);
	uint matIndex = 0;

	// Use first matrix as default, unless we have a matrix index
	IF_MATRICES( matIndex = In.MatIndex);

	position = mul(ModelMat[matIndex], position);
	Out.Position = mul(WorldViewProj, position);

	return Out;
}


[Fragment shader]

float4 main(PsIn In) : SV_Target
{
	return globalColor;
}
